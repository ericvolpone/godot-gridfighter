[gd_scene load_steps=20 format=3 uid="uid://bcml2xb31ytjt"]

[ext_resource type="Script" uid="uid://bqr5qkduod3sj" path="res://entities/levels/all/level.gd" id="1_btq12"]
[ext_resource type="Script" uid="uid://bjrxkk5hawuqi" path="res://entities/levels/all/player_spawner.gd" id="2_quiwk"]
[ext_resource type="Script" uid="uid://r5ngirohclty" path="res://entities/levels/multiplayer/koth/all/koth_manager.gd" id="2_rkb10"]
[ext_resource type="PackedScene" uid="uid://bwfxvg52snmmn" path="res://entities/ui/scoreboard/scoreboard.tscn" id="3_quiwk"]
[ext_resource type="Script" uid="uid://dgyka6dxbswed" path="res://entities/levels/multiplayer/all/respawner.gd" id="4_27bor"]
[ext_resource type="Script" uid="uid://cry6vs4abvsk4" path="res://entities/levels/all/projectile_spawner.gd" id="4_mjkyc"]
[ext_resource type="Script" uid="uid://qmwebcop6ai4" path="res://entities/levels/all/power_up_spawner.gd" id="5_mjkyc"]
[ext_resource type="Script" uid="uid://cqxvu8yj5bdg2" path="res://entities/levels/all/aoe_spawner.gd" id="6_eus47"]
[ext_resource type="Theme" uid="uid://cetodgfjvpoew" path="res://resources/ui/lavender_soda.tres" id="8_2bfne"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_mjkyc"]
sky_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)
ground_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)

[sub_resource type="Sky" id="Sky_mjkyc"]
sky_material = SubResource("ProceduralSkyMaterial_mjkyc")

[sub_resource type="Environment" id="Environment_2bfne"]
background_mode = 2
background_energy_multiplier = 0.84
sky = SubResource("Sky_mjkyc")
tonemap_mode = 2
glow_enabled = true
glow_strength = 0.8

[sub_resource type="SceneReplicationConfig" id="SceneReplicationConfig_eus47"]
properties/0/path = NodePath("Scoreboard:score_by_player")
properties/0/spawn = true
properties/0/replication_mode = 1
properties/1/path = NodePath("KothManager:current_ring_index")
properties/1/spawn = true
properties/1/replication_mode = 1

[sub_resource type="Shader" id="Shader_mjkyc"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + (TIME * 0.05)
	;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_mjkyc"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_eus47"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_mjkyc")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_8tg4l"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_mjkyc")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_2bfne"]
render_priority = 0
shader = SubResource("Shader_mjkyc")
shader_parameter/albedo = Color(7.70092e-07, 0.615292, 0.615489, 1)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_8tg4l")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_eus47")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.1, 0.1, 0.1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_g2lxu"]
material = SubResource("ShaderMaterial_2bfne")
size = Vector3(200, 1, 200)

[node name="Level" type="Node3D"]
script = ExtResource("1_btq12")
metadata/_custom_type_script = "uid://bqr5qkduod3sj"

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_2bfne")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.931693, -0.353442, -0.0838303, -0.0720683, -0.0463348, 0.996323, -0.356026, 0.934308, 0.0176977, 0, 0, 0)
light_color = Color(0.999697, 0.823163, 0.880265, 1)
light_energy = 0.8
shadow_enabled = true

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.819152, 0.573576, 0, -0.573576, 0.819152, 0, 8.27391, 15.7015)
fov = 50.0

[node name="PlayerSpawner" type="MultiplayerSpawner" parent="." node_paths=PackedStringArray("respawner")]
spawn_path = NodePath(".")
script = ExtResource("2_quiwk")
respawner = NodePath("../Respawner")

[node name="Respawner" type="Node" parent="."]
script = ExtResource("4_27bor")
metadata/_custom_type_script = "uid://dgyka6dxbswed"

[node name="ProjectileSpawner" type="MultiplayerSpawner" parent="."]
spawn_path = NodePath(".")
script = ExtResource("4_mjkyc")

[node name="PowerUpSpawner" type="MultiplayerSpawner" parent="."]
spawn_path = NodePath(".")
script = ExtResource("5_mjkyc")

[node name="AOESpawner" type="MultiplayerSpawner" parent="."]
spawn_path = NodePath(".")
script = ExtResource("6_eus47")

[node name="MultiplayerSynchronizer" type="MultiplayerSynchronizer" parent="."]
replication_config = SubResource("SceneReplicationConfig_eus47")

[node name="KothManager" type="Node" parent="."]
script = ExtResource("2_rkb10")
metadata/_custom_type_script = "uid://r5ngirohclty"

[node name="Scoreboard" parent="." instance=ExtResource("3_quiwk")]
theme = ExtResource("8_2bfne")

[node name="WaterFloor" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -10, -41.2345)
mesh = SubResource("BoxMesh_g2lxu")
