[gd_scene load_steps=10 format=3 uid="uid://c2uhgyveatwq4"]

[ext_resource type="PackedScene" uid="uid://bcml2xb31ytjt" path="res://entities/levels/all/level.tscn" id="1_3gytd"]
[ext_resource type="PackedScene" uid="uid://bumiv1b53rviu" path="res://entities/levels/multiplayer/koth/all/koth_ring.tscn" id="2_xbqhk"]
[ext_resource type="PackedScene" uid="uid://ii2xhtag4o0h" path="res://entities/levels/multiplayer/stairs/stairs.glb" id="3_01on7"]

[sub_resource type="Shader" id="Shader_mjkyc"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + (TIME * 0.05)
	;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_mjkyc"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_eus47"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_mjkyc")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_8tg4l"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_mjkyc")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3gytd"]
render_priority = 0
shader = SubResource("Shader_mjkyc")
shader_parameter/albedo = Color(0.362245, 0.226592, 1.44392e-07, 1)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_8tg4l")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_eus47")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.1, 0.1, 0.1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_3gytd"]
material = SubResource("ShaderMaterial_3gytd")
size = Vector3(200, 1, 200)

[node name="TheStairs" instance=ExtResource("1_3gytd")]

[node name="Camera3D" parent="." index="2"]
transform = Transform3D(1, 0, 0, 0, 0.819152, 0.573576, 0, -0.573576, 0.819152, -0.328421, 10.1192, 13.488)

[node name="Respawner" parent="." index="4" node_paths=PackedStringArray("respawn_point_availability")]
respawn_point_availability = {
NodePath("RespawnPoint1"): true,
NodePath("RespawnPoint2"): true,
NodePath("RespawnPoint3"): true,
NodePath("RespawnPoint4"): true,
NodePath("RespawnPoint5"): true,
NodePath("RespawnPoint6"): true
}

[node name="RespawnPoint1" type="Marker3D" parent="Respawner" index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.5616, 2, 3.94152)

[node name="RespawnPoint2" type="Marker3D" parent="Respawner" index="1"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3.12841, 2, 3.21626)

[node name="RespawnPoint3" type="Marker3D" parent="Respawner" index="2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -8.1656, 3.6, 0.272304)

[node name="RespawnPoint4" type="Marker3D" parent="Respawner" index="3"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 9.02497, 3.2, -0.659009)

[node name="RespawnPoint5" type="Marker3D" parent="Respawner" index="4"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0168531, 2, -4.45904)

[node name="RespawnPoint6" type="Marker3D" parent="Respawner" index="5"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0154953, 2, 3.46314)

[node name="PowerUpSpawner" parent="." index="6" node_paths=PackedStringArray("spawn_point_by_availability")]
spawn_point_by_availability = {
NodePath("PowerUpSpawn1"): true,
NodePath("PowerUpSpawn2"): true,
NodePath("PowerUpSpawn3"): true,
NodePath("PowerUpSpawn4"): true,
NodePath("PowerUpSpawn5"): true
}

[node name="PowerUpSpawn1" type="Marker3D" parent="PowerUpSpawner" index="0"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.24844, 1.32512, 2.94141)

[node name="PowerUpSpawn2" type="Marker3D" parent="PowerUpSpawner" index="1"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.69302, 1.32512, 2.94918)

[node name="PowerUpSpawn3" type="Marker3D" parent="PowerUpSpawner" index="2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.41458, 3.63666, -2.65266)

[node name="PowerUpSpawn4" type="Marker3D" parent="PowerUpSpawner" index="3"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -4.091, 3.58203, -2.98007)

[node name="PowerUpSpawn5" type="Marker3D" parent="PowerUpSpawner" index="4"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.0517113, -5.66244e-07, 4.9691)

[node name="KothManager" parent="." index="10" node_paths=PackedStringArray("koth_rings")]
koth_rings = [NodePath("KothRing1"), NodePath("KothRing2"), NodePath("KothRing3"), NodePath("KothRing4"), NodePath("KothRing5")]

[node name="KothRing1" parent="KothManager" index="0" instance=ExtResource("2_xbqhk")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.00977206, 0, 4.16158)

[node name="KothRing2" parent="KothManager" index="1" instance=ExtResource("2_xbqhk")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -6.58656, 2.92512, -0.995571)

[node name="KothRing3" parent="KothManager" index="2" instance=ExtResource("2_xbqhk")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.825, 2.82888, -1.24224)

[node name="KothRing4" parent="KothManager" index="3" instance=ExtResource("2_xbqhk")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.740322, 5.26667, -6.39718)

[node name="KothRing5" parent="KothManager" index="4" instance=ExtResource("2_xbqhk")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.00967121, 1, -8.49483)

[node name="WaterFloor" parent="." index="12"]
mesh = SubResource("BoxMesh_3gytd")

[node name="Terrain" parent="." index="13" instance=ExtResource("3_01on7")]
transform = Transform3D(0.707107, 0, -0.707107, 0, 1, 0, 0.707107, 0, 0.707107, 0, 0, 0)

[node name="IceManager" parent="." index="14"]
level_mesh_path = NodePath("../Terrain/level")

[editable path="Terrain"]
