[gd_scene load_steps=14 format=3 uid="uid://cly568e1kmem5"]

[ext_resource type="PackedScene" uid="uid://cyw3gro3ao66a" path="res://entities/menu/main_menu.tscn" id="1_py8lp"]
[ext_resource type="PackedScene" uid="uid://ymb8qvia5s6k" path="res://entities/player/heroes/rocky/rocky.tscn" id="2_53o0w"]
[ext_resource type="Theme" uid="uid://cetodgfjvpoew" path="res://resources/ui/lavender_soda.tres" id="2_fiqdu"]
[ext_resource type="PackedScene" uid="uid://br3qftaid5etj" path="res://entities/player/heroes/bolty/bolty.tscn" id="3_46kfh"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_fiqdu"]
sky_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)
ground_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)

[sub_resource type="Sky" id="Sky_kqgyu"]
sky_material = SubResource("ProceduralSkyMaterial_fiqdu")

[sub_resource type="Environment" id="Environment_4loll"]
background_mode = 2
background_energy_multiplier = 0.84
sky = SubResource("Sky_kqgyu")
tonemap_mode = 2
glow_enabled = true
glow_strength = 0.8

[sub_resource type="Shader" id="Shader_py8lp"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + (TIME * 0.05)
	;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_2bfne"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_53o0w"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_2bfne")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_46kfh"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_2bfne")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_i3vcw"]
render_priority = 0
shader = SubResource("Shader_py8lp")
shader_parameter/albedo = Color(7.70092e-07, 0.615292, 0.615489, 1)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_46kfh")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_53o0w")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.1, 0.1, 0.1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_fiqdu"]
material = SubResource("ShaderMaterial_i3vcw")
size = Vector3(200, 1, 200)

[node name="Node3D" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_4loll")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.931693, -0.353442, -0.0838303, 0.0747269, -0.412337, 0.907961, -0.355478, 0.839677, 0.410583, 0, 0, 0)
light_color = Color(0.999697, 0.823163, 0.880265, 1)
light_energy = 0.8
shadow_enabled = true

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.819152, 0.573576, 0, -0.573576, 0.819152, 0, 8.27391, 15.7015)
fov = 50.0

[node name="WaterFloor" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -10, -41.2345)
mesh = SubResource("BoxMesh_fiqdu")

[node name="Menu Layer" type="CanvasLayer" parent="."]

[node name="MainMenu" parent="Menu Layer" instance=ExtResource("1_py8lp")]
theme = ExtResource("2_fiqdu")

[node name="Rocky" parent="." instance=ExtResource("2_53o0w")]
transform = Transform3D(0.997139, 0, 0.0755878, 0, 1, 0, -0.0755878, 0, 0.997139, 0.70788, 4.56874, 8.84277)
script = null

[node name="GeneralSkeleton" parent="Rocky/MasterArmature" index="0"]
bones/0/position = Vector3(0.000803366, 1.03449, -0.000786769)
bones/0/rotation = Quaternion(-0.00810176, -0.00776218, -0.0117575, 0.999868)
bones/1/rotation = Quaternion(0.00933706, -0.00190895, -0.0147418, 0.999846)
bones/2/rotation = Quaternion(-0.0335236, 0.000614303, -0.000890529, 0.999437)
bones/3/rotation = Quaternion(-0.0335231, 0.000662435, -0.000906971, 0.999437)
bones/4/rotation = Quaternion(-0.0234346, -0.00266439, -0.00376822, 0.999715)
bones/5/rotation = Quaternion(-0.0671947, -0.0499876, -0.0791347, 0.99334)
bones/7/rotation = Quaternion(0.584264, 0.380652, 0.568961, -0.435916)
bones/8/rotation = Quaternion(0.076007, 0.862123, -0.469312, -0.17525)
bones/9/rotation = Quaternion(0.0543819, -0.705008, 0.0543818, 0.705017)
bones/10/rotation = Quaternion(0.0221144, 0.70868, 0.00227156, 0.705179)
bones/11/rotation = Quaternion(-0.191327, -0.0431796, 0.0276159, 0.980187)
bones/12/rotation = Quaternion(-0.0188571, 0.759812, 0.218664, 0.611977)
bones/13/rotation = Quaternion(-0.100275, -0.0587095, -0.227211, 0.966888)
bones/14/scale = Vector3(1.00002, 1, 0.999985)
bones/15/rotation = Quaternion(0.167511, -0.0127859, 0.0226692, 0.985527)
bones/16/rotation = Quaternion(0.278055, -3.56138e-06, -0.0284942, 0.960142)
bones/17/rotation = Quaternion(0.166517, -2.25007e-06, -0.0170641, 0.985891)
bones/19/rotation = Quaternion(0.173002, -0.00392842, -0.032916, 0.984364)
bones/20/rotation = Quaternion(0.260563, -2.5779e-06, -0.0267017, 0.965087)
bones/21/rotation = Quaternion(0.22128, -2.10106e-06, -0.022676, 0.974947)
bones/23/rotation = Quaternion(0.237996, 0.00138125, -0.0676861, 0.968904)
bones/24/rotation = Quaternion(0.291818, -5.03659e-06, -0.0299045, 0.956006)
bones/25/rotation = Quaternion(0.305534, -5.0813e-06, -0.0313103, 0.951666)
bones/27/rotation = Quaternion(0.249928, -0.0749119, -0.0688153, 0.962906)
bones/28/rotation = Quaternion(0.28144, -0.000130907, -0.0288409, 0.959145)
bones/29/rotation = Quaternion(0.233319, -7.15256e-07, -0.0239098, 0.972106)
bones/31/rotation = Quaternion(0.565836, -0.407358, -0.544348, -0.466449)
bones/32/rotation = Quaternion(0.0586498, 0.826292, -0.560179, 0.000508256)
bones/33/rotation = Quaternion(0.0885714, 0.701545, -0.0885715, 0.70153)
bones/34/rotation = Quaternion(0.0940356, -0.770882, -0.0843592, 0.624325)
bones/35/rotation = Quaternion(-0.123248, 0.0329744, -0.0223926, 0.991575)
bones/36/rotation = Quaternion(-0.0709213, -0.780325, -0.169375, 0.597809)
bones/37/rotation = Quaternion(-0.119775, 0.0805813, 0.194075, 0.970307)
bones/38/scale = Vector3(1.00002, 1, 0.999984)
bones/39/rotation = Quaternion(0.104177, 0.00922806, -0.048173, 0.993349)
bones/40/rotation = Quaternion(0.337142, -2.75671e-06, 0.0274643, 0.941053)
bones/41/rotation = Quaternion(0.237422, -1.95205e-06, 0.0193408, 0.971214)
bones/43/rotation = Quaternion(0.211943, 0.0134948, -0.00852036, 0.977152)
bones/44/rotation = Quaternion(0.298755, -2.27988e-06, 0.0243372, 0.954019)
bones/45/rotation = Quaternion(0.24169, -1.83284e-06, 0.0196885, 0.970154)
bones/47/rotation = Quaternion(0.271445, 0.00631849, 0.0367074, 0.961733)
bones/48/rotation = Quaternion(0.310255, -2.23517e-07, 0.0252742, 0.950317)
bones/49/rotation = Quaternion(0.20595, -8.9407e-08, 0.0167771, 0.978419)
bones/51/rotation = Quaternion(0.249433, 0.118881, 0.117687, 0.953834)
bones/52/rotation = Quaternion(0.255521, 2.05636e-06, 0.0208152, 0.966579)
bones/53/rotation = Quaternion(0.207046, -2.81632e-06, 0.0168665, 0.978186)
bones/55/rotation = Quaternion(0.0670644, 0.0498178, 0.995906, -0.0345348)
bones/56/rotation = Quaternion(-0.0208729, 0.988625, -0.147947, 0.0172157)
bones/57/rotation = Quaternion(-0.0397239, 0.649623, -0.757965, 0.043594)
bones/58/rotation = Quaternion(9.38426e-09, 1, -1.19209e-07, -1.66282e-08)
bones/60/rotation = Quaternion(-0.0971588, 0.00297504, 0.994328, 0.0431655)
bones/61/rotation = Quaternion(0.0204734, 0.994442, -0.0865031, -0.0564241)
bones/62/rotation = Quaternion(0.0505959, 0.678707, -0.730533, -0.0558397)
bones/63/rotation = Quaternion(-6.552e-08, 1, 0.000117153, -0.00017768)

[node name="AnimationPlayer" parent="Rocky" index="1"]
autoplay = "master_animations/Idle"

[node name="Bolty" parent="." instance=ExtResource("3_46kfh")]
transform = Transform3D(0.997139, 0, 0.0755878, 0, 1, 0, -0.0755878, 0, 0.997139, 2.34363, 4.56874, 8.84277)
script = null

[node name="GeneralSkeleton" parent="Bolty/MasterArmature" index="0"]
bones/0/position = Vector3(0.0007725, 0.994747, -0.00075654)
bones/0/rotation = Quaternion(-0.00810176, -0.00776218, -0.0117575, 0.999868)
bones/1/rotation = Quaternion(0.00933706, -0.00190895, -0.0147418, 0.999846)
bones/2/rotation = Quaternion(-0.0335236, 0.000614303, -0.000890529, 0.999437)
bones/3/rotation = Quaternion(-0.0335231, 0.000662435, -0.000906971, 0.999437)
bones/4/rotation = Quaternion(-0.0234346, -0.00266439, -0.00376822, 0.999715)
bones/5/rotation = Quaternion(-0.0671947, -0.0499876, -0.0791347, 0.99334)
bones/7/rotation = Quaternion(0.584264, 0.380652, 0.568961, -0.435916)
bones/8/rotation = Quaternion(0.076007, 0.862123, -0.469312, -0.17525)
bones/9/rotation = Quaternion(0.0543819, -0.705008, 0.0543818, 0.705017)
bones/10/rotation = Quaternion(0.0221144, 0.70868, 0.00227156, 0.705179)
bones/11/rotation = Quaternion(-0.191327, -0.0431796, 0.0276159, 0.980187)
bones/12/rotation = Quaternion(-0.0188571, 0.759812, 0.218664, 0.611977)
bones/13/rotation = Quaternion(-0.100275, -0.0587095, -0.227211, 0.966888)
bones/14/scale = Vector3(1.00002, 1, 0.999985)
bones/15/rotation = Quaternion(0.167511, -0.0127859, 0.0226692, 0.985527)
bones/16/rotation = Quaternion(0.278055, -3.56138e-06, -0.0284942, 0.960142)
bones/17/rotation = Quaternion(0.166517, -2.25007e-06, -0.0170641, 0.985891)
bones/19/rotation = Quaternion(0.173002, -0.00392842, -0.032916, 0.984364)
bones/20/rotation = Quaternion(0.260563, -2.5779e-06, -0.0267017, 0.965087)
bones/21/rotation = Quaternion(0.22128, -2.10106e-06, -0.022676, 0.974947)
bones/23/rotation = Quaternion(0.237996, 0.00138125, -0.0676861, 0.968904)
bones/24/rotation = Quaternion(0.291818, -5.03659e-06, -0.0299045, 0.956006)
bones/25/rotation = Quaternion(0.305534, -5.0813e-06, -0.0313103, 0.951666)
bones/27/rotation = Quaternion(0.249928, -0.0749119, -0.0688153, 0.962906)
bones/28/rotation = Quaternion(0.28144, -0.000130907, -0.0288409, 0.959145)
bones/29/rotation = Quaternion(0.233319, -7.15256e-07, -0.0239098, 0.972106)
bones/31/rotation = Quaternion(0.565836, -0.407358, -0.544348, -0.466449)
bones/32/rotation = Quaternion(0.0586498, 0.826292, -0.560179, 0.000508256)
bones/33/rotation = Quaternion(0.0885714, 0.701545, -0.0885715, 0.70153)
bones/34/rotation = Quaternion(0.0940356, -0.770882, -0.0843592, 0.624325)
bones/35/rotation = Quaternion(-0.123248, 0.0329744, -0.0223926, 0.991575)
bones/36/rotation = Quaternion(-0.0709213, -0.780325, -0.169375, 0.597809)
bones/37/rotation = Quaternion(-0.119775, 0.0805813, 0.194075, 0.970307)
bones/38/scale = Vector3(1.00002, 1, 0.999984)
bones/39/rotation = Quaternion(0.104177, 0.00922806, -0.048173, 0.993349)
bones/40/rotation = Quaternion(0.337142, -2.75671e-06, 0.0274643, 0.941053)
bones/41/rotation = Quaternion(0.237422, -1.95205e-06, 0.0193408, 0.971214)
bones/43/rotation = Quaternion(0.211943, 0.0134948, -0.00852036, 0.977152)
bones/44/rotation = Quaternion(0.298755, -2.27988e-06, 0.0243372, 0.954019)
bones/45/rotation = Quaternion(0.24169, -1.83284e-06, 0.0196885, 0.970154)
bones/47/rotation = Quaternion(0.271445, 0.00631849, 0.0367074, 0.961733)
bones/48/rotation = Quaternion(0.310255, -2.23517e-07, 0.0252742, 0.950317)
bones/49/rotation = Quaternion(0.20595, -8.9407e-08, 0.0167771, 0.978419)
bones/51/rotation = Quaternion(0.249433, 0.118881, 0.117687, 0.953834)
bones/52/rotation = Quaternion(0.255521, 2.05636e-06, 0.0208152, 0.966579)
bones/53/rotation = Quaternion(0.207046, -2.81632e-06, 0.0168665, 0.978186)
bones/55/rotation = Quaternion(0.0670644, 0.0498178, 0.995906, -0.0345348)
bones/56/rotation = Quaternion(-0.0208729, 0.988625, -0.147947, 0.0172157)
bones/57/rotation = Quaternion(-0.0397239, 0.649623, -0.757965, 0.043594)
bones/58/rotation = Quaternion(9.38426e-09, 1, -1.19209e-07, -1.66282e-08)
bones/60/rotation = Quaternion(-0.0971588, 0.00297504, 0.994328, 0.0431655)
bones/61/rotation = Quaternion(0.0204734, 0.994442, -0.0865031, -0.0564241)
bones/62/rotation = Quaternion(0.0505959, 0.678707, -0.730533, -0.0558397)
bones/63/rotation = Quaternion(-6.552e-08, 1, 0.000117153, -0.00017768)

[node name="AnimationPlayer" parent="Bolty" index="1"]
autoplay = "master_animations/Idle"

[editable path="Rocky"]
[editable path="Bolty"]
