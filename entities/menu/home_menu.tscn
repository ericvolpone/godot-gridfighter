[gd_scene load_steps=18 format=3 uid="uid://cly568e1kmem5"]

[ext_resource type="PackedScene" uid="uid://cyw3gro3ao66a" path="res://entities/menu/main_menu.tscn" id="1_rm2r3"]
[ext_resource type="PackedScene" uid="uid://jc5dgxhpbdb" path="res://entities/player/heroes/rocky/rocky.tscn" id="2_wr481"]
[ext_resource type="PackedScene" uid="uid://5mey2f6r7bob" path="res://entities/player/heroes/bolty/bolty.tscn" id="3_rm2r3"]
[ext_resource type="PackedScene" uid="uid://uq4qn3vqcddf" path="res://entities/player/heroes/slushy/slushy.tscn" id="4_rm2r3"]
[ext_resource type="PackedScene" uid="uid://5renjtem4vsk" path="res://entities/player/heroes/torchy/torchy.tscn" id="5_nkmt6"]
[ext_resource type="PackedScene" uid="uid://diojur2e68imi" path="res://entities/player/heroes/woody/woody.tscn" id="6_j3l5m"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_fiqdu"]
sky_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)
ground_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)

[sub_resource type="Sky" id="Sky_kqgyu"]
sky_material = SubResource("ProceduralSkyMaterial_fiqdu")

[sub_resource type="Environment" id="Environment_4loll"]
background_mode = 2
background_energy_multiplier = 0.84
sky = SubResource("Sky_kqgyu")
tonemap_mode = 2
glow_enabled = true
glow_strength = 0.8

[sub_resource type="Shader" id="Shader_py8lp"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset + (TIME * 0.05)
	;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_2bfne"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_53o0w"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_2bfne")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_46kfh"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_2bfne")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_i3vcw"]
render_priority = 0
shader = SubResource("Shader_py8lp")
shader_parameter/albedo = Color(7.70092e-07, 0.615292, 0.615489, 1)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_46kfh")
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_53o0w")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.1, 0.1, 0.1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_fiqdu"]
material = SubResource("ShaderMaterial_i3vcw")
size = Vector3(200, 1, 200)

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_j3l5m"]
albedo_color = Color(0.0705882, 0.0666667, 0, 1)

[sub_resource type="BoxMesh" id="BoxMesh_l13iv"]
material = SubResource("StandardMaterial3D_j3l5m")
size = Vector3(8, 0.5, 1)

[node name="Node3D" type="Node3D"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_4loll")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.931693, -0.353442, -0.0838302, -0.163924, 0.203154, 0.965328, -0.324157, 0.913131, -0.247214, 0, 0, 0)
light_color = Color(0.999697, 0.823163, 0.880265, 1)
light_energy = 0.8
shadow_enabled = true

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.819152, 0.573576, 0, -0.573576, 0.819152, -1.64285, 8.57687, 15.7015)
fov = 50.0

[node name="WaterFloor" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -10, -41.2345)
mesh = SubResource("BoxMesh_fiqdu")

[node name="Menu Layer" type="CanvasLayer" parent="."]

[node name="MainMenu" parent="Menu Layer" instance=ExtResource("1_rm2r3")]

[node name="Rocky" parent="." instance=ExtResource("2_wr481")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -2.97, 4, 8.778)
script = null

[node name="GeneralSkeleton" parent="Rocky/Armature" index="0"]
bones/0/position = Vector3(-0.0761752, 0.519551, -0.0371707)
bones/0/rotation = Quaternion(-0.0366419, -0.0170568, 0.0545, 0.997696)
bones/1/rotation = Quaternion(0.0718575, 0.0099251, 0.0559747, 0.995794)
bones/2/rotation = Quaternion(0.00392152, 0.00101299, 0.0170398, 0.999847)
bones/3/rotation = Quaternion(0.00381349, -0.00129081, 0.017141, 0.999845)
bones/4/rotation = Quaternion(0.519969, 0.496113, 0.526928, -0.453708)
bones/5/rotation = Quaternion(-0.0285695, 0.917554, -0.0657313, 0.391097)
bones/6/rotation = Quaternion(0.616456, -0.416992, 0.527523, 0.409657)
bones/7/rotation = Quaternion(8.82937e-09, 0.707107, 8.82937e-09, 0.707107)
bones/8/rotation = Quaternion(0.0579857, 0.00264932, 0.00103215, 0.998313)
bones/9/rotation = Quaternion(-0.0405894, 0.0615252, -0.0991998, 0.992334)
bones/11/rotation = Quaternion(0.495799, -0.458646, -0.524126, -0.518768)
bones/12/rotation = Quaternion(-0.122943, 0.862175, -0.0708808, -0.486329)
bones/13/rotation = Quaternion(0.468596, 0.519808, -0.490004, 0.519724)
bones/14/rotation = Quaternion(-9.80435e-10, -0.707107, 9.80435e-10, 0.707107)
bones/15/rotation = Quaternion(0.25946, 0.0357675, 0.963819, 0.0495354)
bones/16/rotation = Quaternion(-0.0556761, 0.953497, -0.274484, -0.111365)
bones/17/rotation = Quaternion(-0.12929, 0.585941, -0.793379, 0.102505)
bones/18/rotation = Quaternion(0.00144513, 0.999916, -0.00883841, -0.00932161)
bones/19/rotation = Quaternion(-0.205639, 0.140431, 0.948259, 0.196969)
bones/20/rotation = Quaternion(0.0623609, 0.923946, -0.35971, 0.114206)
bones/21/rotation = Quaternion(0.24794, 0.621161, -0.724571, -0.166376)
bones/22/rotation = Quaternion(0.00326407, 0.999476, 0.0229373, -0.0226195)

[node name="Bolty" parent="." instance=ExtResource("3_rm2r3")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -1.47, 4, 8.778)
script = null

[node name="Slushy" parent="." instance=ExtResource("4_rm2r3")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.03, 4, 8.778)
script = null

[node name="Torchy" parent="." instance=ExtResource("5_nkmt6")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.53, 4, 8.778)
script = null

[node name="Woody" parent="." instance=ExtResource("6_j3l5m")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 3.03, 4, 8.778)
script = null

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3.75, 8.81696)
cast_shadow = 0
mesh = SubResource("BoxMesh_l13iv")

[editable path="Rocky"]
